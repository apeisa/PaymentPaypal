<?php

/**
 * 
 * PayPal payment method for ProcessWire
 * 2015-2016 - Antti Peisa
 * 
 * Uses PayPal standard payment API and PDT for payment verification. 
 * 
 * Big thanks to Torleif Berger for this article:
 * http://www.geekality.net/2010/10/19/php-tutorial-paypal-payment-data-transfers-pdt/
 * 
 */



class PaymentPaypal extends PaymentModule {

  public static function getModuleInfo() {
    return array(
      'title' => 'PaymentPayal', 
      'version' => 001, 
      'summary' => 'PaymentPaypal - using standard payment API and PDT for verification',
      'singular' => false,
      'autoload' => false, 
      'requires' => 'PaymentModule'
    );
  }

  public function init() {
    $this->currenct = $this->defaultCurrency;
  }

  public function getTitle() {
    return $this->_("PayPal");
  }

  public function getFailureReason() {
    return $this->session->paypalError;
  }

  public function processPayment() {

    $tx = $this->input->get->tx;
    $postParams = array(
      'cmd' => '_notify-synch',
      'tx' => $tx, 
      'at' => $this->identityToken 
    ); 

    $endpoint = $this->endpoint . 'cgi-bin/webscr';

    if ($this->curl) {
      $ch = curl_init();
      curl_setopt($ch,CURLOPT_URL, $endpoint);
      curl_setopt($ch,CURLOPT_POST, count($postParams));
      curl_setopt($ch,CURLOPT_POSTFIELDS, http_build_query($postParams));
      curl_setopt($ch,CURLOPT_RETURNTRANSFER, TRUE);
      curl_setopt($ch,CURLOPT_HEADER, FALSE);
      curl_setopt($ch,CURLOPT_SSLVERSION, 6);
      $response = curl_exec($ch); 
    } else {
      $http = new WireHttp();
      $response = $http->post($endpoint, $postParams); 
    }

    if (! $response) {
      throw new WireException("Couldn't get access into ");
      
    }

    // Response should start with SUCCESS, otherwise something fishy going on (or more likely PayPal changing something...)
    if( ! strpos($response, 'SUCCESS') === 0) {
      // TODO: We could do much better error handling here
      if (strpos($response, "4020")) $this->session->paypalError = "PayPal error 4020. Most probably wrong or missing Identity Token";
      else $this->session->paypalError = $response;
      return false;
    }
    
    // Clean the messy response into an array
    $data = substr($response, 7);
    $data = urldecode($data);
    preg_match_all('/^([^=\s]++)=(.*+)/m', $data, $m, PREG_PATTERN_ORDER);
    $data = array_combine($m[1], $m[2]);

    // Verify payment to have same id and amount that we except
    $amount = $data['mc_gross'] * 100;
    if ($this->getTotalAmount()  ==  $amount && $this->id == $data['invoice']) {
      return true;
    } 
    
    return false;
  }

  public function render() {

    if ($this->getTotalAmount() <= 0) throw new WireException("Products are not set");
    if ($this->processUrl == '') throw new WireException("processUrl is not set");

    $formTemplate = new TemplateFile(__DIR__ . DIRECTORY_SEPARATOR . "payment_form.php");
    $formTemplate->set("invoice", $this->id);
    $formTemplate->set("endpoint", $this->endpoint);
    $formTemplate->set("customer", $this->customer);
    $formTemplate->set("products", $this->products);
    $formTemplate->set("business", $this->business);
    $formTemplate->set("currency", $this->currency);
    $formTemplate->set("location", $this->location);
    $formTemplate->set("returnUrl", $this->processUrl);
    $formTemplate->set("returntxt", $this->returntxt);
    $formTemplate->set("cancelUrl", $this->cancelUrl);

    return $formTemplate->render();
  }

  public static function getModuleConfigInputfields(array $data) {
    $inputfields = new InputfieldWrapper();

    $field = wire('modules')->get('InputfieldText');
    $field->name = 'currency';
    $field->label = __("Default currency");
    $field->notes = __("Use this currency by default (always possible to overwrite when using this module from API)");
    if(isset($data['currency'])) $field->value = $data['currency'];
    $inputfields->add($field);

    $field = wire('modules')->get('InputfieldText');
    $field->name = 'returntxt';
    $field->label = __("Return to store text at PayPal");
    $field->notes = __("Text that is shown on back to store buttons at PayPal.");
    if(isset($data['returntxt'])) $field->value = $data['returntxt'];
    $inputfields->add($field);

    $field = wire('modules')->get('InputfieldText');
    $field->name = 'location';
    $field->label = __("Location");
    $field->notes = __("Location code, ie. GB");
    if(isset($data['location'])) $field->value = $data['location'];
    $inputfields->add($field);

    $field = wire('modules')->get('InputfieldText');
    $field->name = 'endpoint';
    $field->label = __("API Endpoint");
    $field->notes = __("Either https://www.paypal.com/ or https://www.sandbox.paypal.com/ depending if testing or not");
    if(isset($data['endpoint'])) $field->value = $data['endpoint'];
    $inputfields->add($field);

    
    $field = wire('modules')->get('InputfieldText');
    $field->name = 'identityToken';
    $field->label = __("Identity Token");
    $field->notes = __("Payment Data Transfer Identity Token (can be found from paypal.com => LOGIN => Profile => My Selling Tools => Website preferences");
    if(isset($data['identityToken'])) $field->value = $data['identityToken'];
    $inputfields->add($field);

    $field = wire('modules')->get('InputfieldEmail');
    $field->name = 'business';
    $field->label = __("PayPal email");
    if(isset($data['business'])) $field->value = $data['business'];
    $inputfields->add($field);

    $field = wire('modules')->get("InputfieldMarkup");
    $field->label = __("Additional information");
    $field->value = "Make sure you have Auto Return and Payment Data Transfer set to ON from <a href='https://www.paypal.com/cgi-bin/customerprofileweb?cmd=_profile-website-payments'>PayPal website preferences</a>";
    $inputfields->add($field);

    $field = wire('modules')->get("InputfieldCheckbox");
    $field->name = 'curl';
    $field->label = __("Use cURL for payment validation");
    $field->description = __("If your successfull payment's doesn't validate, you might want to try this cURL based verification instead of the standard (WireHttp)");
    $field->value = 1;
    $field->attr('checked', empty($data['curl']) ? '' : 'checked');
    $inputfields->add($field);

    return $inputfields;
  }
}
